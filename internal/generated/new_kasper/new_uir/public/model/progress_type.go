//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type ProgressType string

const (
	ProgressType_Intro      ProgressType = "intro"
	ProgressType_Ch1        ProgressType = "ch. 1"
	ProgressType_Ch2        ProgressType = "ch. 2"
	ProgressType_Ch3        ProgressType = "ch. 3"
	ProgressType_Ch4        ProgressType = "ch. 4"
	ProgressType_Ch5        ProgressType = "ch. 5"
	ProgressType_Ch6        ProgressType = "ch. 6"
	ProgressType_End        ProgressType = "end"
	ProgressType_Literature ProgressType = "literature"
	ProgressType_Abstract   ProgressType = "abstract"
)

func (e *ProgressType) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "intro":
		*e = ProgressType_Intro
	case "ch. 1":
		*e = ProgressType_Ch1
	case "ch. 2":
		*e = ProgressType_Ch2
	case "ch. 3":
		*e = ProgressType_Ch3
	case "ch. 4":
		*e = ProgressType_Ch4
	case "ch. 5":
		*e = ProgressType_Ch5
	case "ch. 6":
		*e = ProgressType_Ch6
	case "end":
		*e = ProgressType_End
	case "literature":
		*e = ProgressType_Literature
	case "abstract":
		*e = ProgressType_Abstract
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for ProgressType enum")
	}

	return nil
}

func (e ProgressType) String() string {
	return string(e)
}
