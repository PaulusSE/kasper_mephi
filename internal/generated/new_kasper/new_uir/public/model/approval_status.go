//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type ApprovalStatus string

const (
	ApprovalStatus_Todo       ApprovalStatus = "todo"
	ApprovalStatus_Approved   ApprovalStatus = "approved"
	ApprovalStatus_OnReview   ApprovalStatus = "on review"
	ApprovalStatus_InProgress ApprovalStatus = "in progress"
	ApprovalStatus_Empty      ApprovalStatus = "empty"
	ApprovalStatus_Failed     ApprovalStatus = "failed"
)

func (e *ApprovalStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "todo":
		*e = ApprovalStatus_Todo
	case "approved":
		*e = ApprovalStatus_Approved
	case "on review":
		*e = ApprovalStatus_OnReview
	case "in progress":
		*e = ApprovalStatus_InProgress
	case "empty":
		*e = ApprovalStatus_Empty
	case "failed":
		*e = ApprovalStatus_Failed
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for ApprovalStatus enum")
	}

	return nil
}

func (e ApprovalStatus) String() string {
	return string(e)
}
