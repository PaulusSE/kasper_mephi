//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Dissertations = newDissertationsTable("public", "dissertations", "")

type dissertationsTable struct {
	postgres.Table

	//Columns
	DissertationID postgres.ColumnString
	StudentID      postgres.ColumnString
	Status         postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Semester       postgres.ColumnInteger
	FileName       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DissertationsTable struct {
	dissertationsTable

	EXCLUDED dissertationsTable
}

// AS creates new DissertationsTable with assigned alias
func (a DissertationsTable) AS(alias string) *DissertationsTable {
	return newDissertationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DissertationsTable with assigned schema name
func (a DissertationsTable) FromSchema(schemaName string) *DissertationsTable {
	return newDissertationsTable(schemaName, a.TableName(), a.Alias())
}

func newDissertationsTable(schemaName, tableName, alias string) *DissertationsTable {
	return &DissertationsTable{
		dissertationsTable: newDissertationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newDissertationsTableImpl("", "excluded", ""),
	}
}

func newDissertationsTableImpl(schemaName, tableName, alias string) dissertationsTable {
	var (
		DissertationIDColumn = postgres.StringColumn("dissertation_id")
		StudentIDColumn      = postgres.StringColumn("student_id")
		StatusColumn         = postgres.StringColumn("status")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		SemesterColumn       = postgres.IntegerColumn("semester")
		FileNameColumn       = postgres.StringColumn("file_name")
		allColumns           = postgres.ColumnList{DissertationIDColumn, StudentIDColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, SemesterColumn, FileNameColumn}
		mutableColumns       = postgres.ColumnList{StudentIDColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, SemesterColumn, FileNameColumn}
	)

	return dissertationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DissertationID: DissertationIDColumn,
		StudentID:      StudentIDColumn,
		Status:         StatusColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Semester:       SemesterColumn,
		FileName:       FileNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
