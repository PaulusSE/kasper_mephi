//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScientificWorksStatus = newScientificWorksStatusTable("public", "scientific_works_status", "")

type scientificWorksStatusTable struct {
	postgres.Table

	//Columns
	WorksID    postgres.ColumnString
	StudentID  postgres.ColumnString
	Semester   postgres.ColumnInteger
	Status     postgres.ColumnString
	UpdatedAt  postgres.ColumnTimestampz
	AcceptedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScientificWorksStatusTable struct {
	scientificWorksStatusTable

	EXCLUDED scientificWorksStatusTable
}

// AS creates new ScientificWorksStatusTable with assigned alias
func (a ScientificWorksStatusTable) AS(alias string) *ScientificWorksStatusTable {
	return newScientificWorksStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScientificWorksStatusTable with assigned schema name
func (a ScientificWorksStatusTable) FromSchema(schemaName string) *ScientificWorksStatusTable {
	return newScientificWorksStatusTable(schemaName, a.TableName(), a.Alias())
}

func newScientificWorksStatusTable(schemaName, tableName, alias string) *ScientificWorksStatusTable {
	return &ScientificWorksStatusTable{
		scientificWorksStatusTable: newScientificWorksStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newScientificWorksStatusTableImpl("", "excluded", ""),
	}
}

func newScientificWorksStatusTableImpl(schemaName, tableName, alias string) scientificWorksStatusTable {
	var (
		WorksIDColumn    = postgres.StringColumn("works_id")
		StudentIDColumn  = postgres.StringColumn("student_id")
		SemesterColumn   = postgres.IntegerColumn("semester")
		StatusColumn     = postgres.StringColumn("status")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		AcceptedAtColumn = postgres.TimestampzColumn("accepted_at")
		allColumns       = postgres.ColumnList{WorksIDColumn, StudentIDColumn, SemesterColumn, StatusColumn, UpdatedAtColumn, AcceptedAtColumn}
		mutableColumns   = postgres.ColumnList{StudentIDColumn, SemesterColumn, StatusColumn, UpdatedAtColumn, AcceptedAtColumn}
	)

	return scientificWorksStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorksID:    WorksIDColumn,
		StudentID:  StudentIDColumn,
		Semester:   SemesterColumn,
		Status:     StatusColumn,
		UpdatedAt:  UpdatedAtColumn,
		AcceptedAt: AcceptedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
