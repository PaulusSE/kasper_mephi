//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TeachingLoadStatus = newTeachingLoadStatusTable("public", "teaching_load_status", "")

type teachingLoadStatusTable struct {
	postgres.Table

	//Columns
	LoadsID    postgres.ColumnString
	StudentID  postgres.ColumnString
	Semester   postgres.ColumnInteger
	Status     postgres.ColumnString
	UpdatedAt  postgres.ColumnTimestampz
	AcceptedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TeachingLoadStatusTable struct {
	teachingLoadStatusTable

	EXCLUDED teachingLoadStatusTable
}

// AS creates new TeachingLoadStatusTable with assigned alias
func (a TeachingLoadStatusTable) AS(alias string) *TeachingLoadStatusTable {
	return newTeachingLoadStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TeachingLoadStatusTable with assigned schema name
func (a TeachingLoadStatusTable) FromSchema(schemaName string) *TeachingLoadStatusTable {
	return newTeachingLoadStatusTable(schemaName, a.TableName(), a.Alias())
}

func newTeachingLoadStatusTable(schemaName, tableName, alias string) *TeachingLoadStatusTable {
	return &TeachingLoadStatusTable{
		teachingLoadStatusTable: newTeachingLoadStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newTeachingLoadStatusTableImpl("", "excluded", ""),
	}
}

func newTeachingLoadStatusTableImpl(schemaName, tableName, alias string) teachingLoadStatusTable {
	var (
		LoadsIDColumn    = postgres.StringColumn("loads_id")
		StudentIDColumn  = postgres.StringColumn("student_id")
		SemesterColumn   = postgres.IntegerColumn("semester")
		StatusColumn     = postgres.StringColumn("status")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		AcceptedAtColumn = postgres.TimestampzColumn("accepted_at")
		allColumns       = postgres.ColumnList{LoadsIDColumn, StudentIDColumn, SemesterColumn, StatusColumn, UpdatedAtColumn, AcceptedAtColumn}
		mutableColumns   = postgres.ColumnList{StudentIDColumn, SemesterColumn, StatusColumn, UpdatedAtColumn, AcceptedAtColumn}
	)

	return teachingLoadStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		LoadsID:    LoadsIDColumn,
		StudentID:  StudentIDColumn,
		Semester:   SemesterColumn,
		Status:     StatusColumn,
		UpdatedAt:  UpdatedAtColumn,
		AcceptedAt: AcceptedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
