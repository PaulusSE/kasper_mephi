//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DissertationTitles = newDissertationTitlesTable("public", "dissertation_titles", "")

type dissertationTitlesTable struct {
	postgres.Table

	//Columns
	TitleID         postgres.ColumnString
	StudentID       postgres.ColumnString
	Title           postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	Status          postgres.ColumnString
	AcceptedAt      postgres.ColumnTimestampz
	Semester        postgres.ColumnInteger
	ResearchObject  postgres.ColumnString
	ResearchSubject postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DissertationTitlesTable struct {
	dissertationTitlesTable

	EXCLUDED dissertationTitlesTable
}

// AS creates new DissertationTitlesTable with assigned alias
func (a DissertationTitlesTable) AS(alias string) *DissertationTitlesTable {
	return newDissertationTitlesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DissertationTitlesTable with assigned schema name
func (a DissertationTitlesTable) FromSchema(schemaName string) *DissertationTitlesTable {
	return newDissertationTitlesTable(schemaName, a.TableName(), a.Alias())
}

func newDissertationTitlesTable(schemaName, tableName, alias string) *DissertationTitlesTable {
	return &DissertationTitlesTable{
		dissertationTitlesTable: newDissertationTitlesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newDissertationTitlesTableImpl("", "excluded", ""),
	}
}

func newDissertationTitlesTableImpl(schemaName, tableName, alias string) dissertationTitlesTable {
	var (
		TitleIDColumn         = postgres.StringColumn("title_id")
		StudentIDColumn       = postgres.StringColumn("student_id")
		TitleColumn           = postgres.StringColumn("title")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		StatusColumn          = postgres.StringColumn("status")
		AcceptedAtColumn      = postgres.TimestampzColumn("accepted_at")
		SemesterColumn        = postgres.IntegerColumn("semester")
		ResearchObjectColumn  = postgres.StringColumn("research_object")
		ResearchSubjectColumn = postgres.StringColumn("research_subject")
		allColumns            = postgres.ColumnList{TitleIDColumn, StudentIDColumn, TitleColumn, CreatedAtColumn, StatusColumn, AcceptedAtColumn, SemesterColumn, ResearchObjectColumn, ResearchSubjectColumn}
		mutableColumns        = postgres.ColumnList{StudentIDColumn, TitleColumn, CreatedAtColumn, StatusColumn, AcceptedAtColumn, SemesterColumn, ResearchObjectColumn, ResearchSubjectColumn}
	)

	return dissertationTitlesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TitleID:         TitleIDColumn,
		StudentID:       StudentIDColumn,
		Title:           TitleColumn,
		CreatedAt:       CreatedAtColumn,
		Status:          StatusColumn,
		AcceptedAt:      AcceptedAtColumn,
		Semester:        SemesterColumn,
		ResearchObject:  ResearchObjectColumn,
		ResearchSubject: ResearchSubjectColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
