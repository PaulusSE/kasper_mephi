//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Supervisors = newSupervisorsTable("public", "supervisors", "")

type supervisorsTable struct {
	postgres.Table

	//Columns
	SupervisorID postgres.ColumnString
	UserID       postgres.ColumnString
	FullName     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SupervisorsTable struct {
	supervisorsTable

	EXCLUDED supervisorsTable
}

// AS creates new SupervisorsTable with assigned alias
func (a SupervisorsTable) AS(alias string) *SupervisorsTable {
	return newSupervisorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SupervisorsTable with assigned schema name
func (a SupervisorsTable) FromSchema(schemaName string) *SupervisorsTable {
	return newSupervisorsTable(schemaName, a.TableName(), a.Alias())
}

func newSupervisorsTable(schemaName, tableName, alias string) *SupervisorsTable {
	return &SupervisorsTable{
		supervisorsTable: newSupervisorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newSupervisorsTableImpl("", "excluded", ""),
	}
}

func newSupervisorsTableImpl(schemaName, tableName, alias string) supervisorsTable {
	var (
		SupervisorIDColumn = postgres.StringColumn("supervisor_id")
		UserIDColumn       = postgres.StringColumn("user_id")
		FullNameColumn     = postgres.StringColumn("full_name")
		allColumns         = postgres.ColumnList{SupervisorIDColumn, UserIDColumn, FullNameColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, FullNameColumn}
	)

	return supervisorsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SupervisorID: SupervisorIDColumn,
		UserID:       UserIDColumn,
		FullName:     FullNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
