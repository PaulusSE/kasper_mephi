//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Publications = newPublicationsTable("public", "publications", "")

type publicationsTable struct {
	postgres.Table

	//Columns
	PublicationID postgres.ColumnString
	WorksID       postgres.ColumnString
	Name          postgres.ColumnString
	Scopus        postgres.ColumnBool
	Rinc          postgres.ColumnBool
	Wac           postgres.ColumnBool
	Wos           postgres.ColumnBool
	Impact        postgres.ColumnFloat
	Status        postgres.ColumnString
	OutputData    postgres.ColumnString
	CoAuthors     postgres.ColumnString
	Volume        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PublicationsTable struct {
	publicationsTable

	EXCLUDED publicationsTable
}

// AS creates new PublicationsTable with assigned alias
func (a PublicationsTable) AS(alias string) *PublicationsTable {
	return newPublicationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublicationsTable with assigned schema name
func (a PublicationsTable) FromSchema(schemaName string) *PublicationsTable {
	return newPublicationsTable(schemaName, a.TableName(), a.Alias())
}

func newPublicationsTable(schemaName, tableName, alias string) *PublicationsTable {
	return &PublicationsTable{
		publicationsTable: newPublicationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPublicationsTableImpl("", "excluded", ""),
	}
}

func newPublicationsTableImpl(schemaName, tableName, alias string) publicationsTable {
	var (
		PublicationIDColumn = postgres.StringColumn("publication_id")
		WorksIDColumn       = postgres.StringColumn("works_id")
		NameColumn          = postgres.StringColumn("name")
		ScopusColumn        = postgres.BoolColumn("scopus")
		RincColumn          = postgres.BoolColumn("rinc")
		WacColumn           = postgres.BoolColumn("wac")
		WosColumn           = postgres.BoolColumn("wos")
		ImpactColumn        = postgres.FloatColumn("impact")
		StatusColumn        = postgres.StringColumn("status")
		OutputDataColumn    = postgres.StringColumn("output_data")
		CoAuthorsColumn     = postgres.StringColumn("co_authors")
		VolumeColumn        = postgres.IntegerColumn("volume")
		allColumns          = postgres.ColumnList{PublicationIDColumn, WorksIDColumn, NameColumn, ScopusColumn, RincColumn, WacColumn, WosColumn, ImpactColumn, StatusColumn, OutputDataColumn, CoAuthorsColumn, VolumeColumn}
		mutableColumns      = postgres.ColumnList{WorksIDColumn, NameColumn, ScopusColumn, RincColumn, WacColumn, WosColumn, ImpactColumn, StatusColumn, OutputDataColumn, CoAuthorsColumn, VolumeColumn}
	)

	return publicationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PublicationID: PublicationIDColumn,
		WorksID:       WorksIDColumn,
		Name:          NameColumn,
		Scopus:        ScopusColumn,
		Rinc:          RincColumn,
		Wac:           WacColumn,
		Wos:           WosColumn,
		Impact:        ImpactColumn,
		Status:        StatusColumn,
		OutputData:    OutputDataColumn,
		CoAuthors:     CoAuthorsColumn,
		Volume:        VolumeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
