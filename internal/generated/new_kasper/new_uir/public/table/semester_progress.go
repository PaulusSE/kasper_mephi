//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SemesterProgress = newSemesterProgressTable("public", "semester_progress", "")

type semesterProgressTable struct {
	postgres.Table

	//Columns
	ProgressID   postgres.ColumnString
	StudentID    postgres.ColumnString
	ProgressType postgres.ColumnString
	First        postgres.ColumnBool
	Second       postgres.ColumnBool
	Third        postgres.ColumnBool
	Forth        postgres.ColumnBool
	Fifth        postgres.ColumnBool
	Sixth        postgres.ColumnBool
	Seventh      postgres.ColumnBool
	Eighth       postgres.ColumnBool
	UpdatedAt    postgres.ColumnTimestampz
	Status       postgres.ColumnString
	AcceptedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SemesterProgressTable struct {
	semesterProgressTable

	EXCLUDED semesterProgressTable
}

// AS creates new SemesterProgressTable with assigned alias
func (a SemesterProgressTable) AS(alias string) *SemesterProgressTable {
	return newSemesterProgressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SemesterProgressTable with assigned schema name
func (a SemesterProgressTable) FromSchema(schemaName string) *SemesterProgressTable {
	return newSemesterProgressTable(schemaName, a.TableName(), a.Alias())
}

func newSemesterProgressTable(schemaName, tableName, alias string) *SemesterProgressTable {
	return &SemesterProgressTable{
		semesterProgressTable: newSemesterProgressTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newSemesterProgressTableImpl("", "excluded", ""),
	}
}

func newSemesterProgressTableImpl(schemaName, tableName, alias string) semesterProgressTable {
	var (
		ProgressIDColumn   = postgres.StringColumn("progress_id")
		StudentIDColumn    = postgres.StringColumn("student_id")
		ProgressTypeColumn = postgres.StringColumn("progress_type")
		FirstColumn        = postgres.BoolColumn("first")
		SecondColumn       = postgres.BoolColumn("second")
		ThirdColumn        = postgres.BoolColumn("third")
		ForthColumn        = postgres.BoolColumn("forth")
		FifthColumn        = postgres.BoolColumn("fifth")
		SixthColumn        = postgres.BoolColumn("sixth")
		SeventhColumn      = postgres.BoolColumn("seventh")
		EighthColumn       = postgres.BoolColumn("eighth")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		StatusColumn       = postgres.StringColumn("status")
		AcceptedAtColumn   = postgres.TimestampzColumn("accepted_at")
		allColumns         = postgres.ColumnList{ProgressIDColumn, StudentIDColumn, ProgressTypeColumn, FirstColumn, SecondColumn, ThirdColumn, ForthColumn, FifthColumn, SixthColumn, SeventhColumn, EighthColumn, UpdatedAtColumn, StatusColumn, AcceptedAtColumn}
		mutableColumns     = postgres.ColumnList{StudentIDColumn, ProgressTypeColumn, FirstColumn, SecondColumn, ThirdColumn, ForthColumn, FifthColumn, SixthColumn, SeventhColumn, EighthColumn, UpdatedAtColumn, StatusColumn, AcceptedAtColumn}
	)

	return semesterProgressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProgressID:   ProgressIDColumn,
		StudentID:    StudentIDColumn,
		ProgressType: ProgressTypeColumn,
		First:        FirstColumn,
		Second:       SecondColumn,
		Third:        ThirdColumn,
		Forth:        ForthColumn,
		Fifth:        FifthColumn,
		Sixth:        SixthColumn,
		Seventh:      SeventhColumn,
		Eighth:       EighthColumn,
		UpdatedAt:    UpdatedAtColumn,
		Status:       StatusColumn,
		AcceptedAt:   AcceptedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
