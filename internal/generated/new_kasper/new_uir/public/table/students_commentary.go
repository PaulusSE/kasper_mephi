//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StudentsCommentary = newStudentsCommentaryTable("public", "students_commentary", "")

type studentsCommentaryTable struct {
	postgres.Table

	//Columns
	CommentaryID postgres.ColumnString
	StudentID    postgres.ColumnString
	Semester     postgres.ColumnInteger
	Commentary   postgres.ColumnString
	CommentedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentsCommentaryTable struct {
	studentsCommentaryTable

	EXCLUDED studentsCommentaryTable
}

// AS creates new StudentsCommentaryTable with assigned alias
func (a StudentsCommentaryTable) AS(alias string) *StudentsCommentaryTable {
	return newStudentsCommentaryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentsCommentaryTable with assigned schema name
func (a StudentsCommentaryTable) FromSchema(schemaName string) *StudentsCommentaryTable {
	return newStudentsCommentaryTable(schemaName, a.TableName(), a.Alias())
}

func newStudentsCommentaryTable(schemaName, tableName, alias string) *StudentsCommentaryTable {
	return &StudentsCommentaryTable{
		studentsCommentaryTable: newStudentsCommentaryTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newStudentsCommentaryTableImpl("", "excluded", ""),
	}
}

func newStudentsCommentaryTableImpl(schemaName, tableName, alias string) studentsCommentaryTable {
	var (
		CommentaryIDColumn = postgres.StringColumn("commentary_id")
		StudentIDColumn    = postgres.StringColumn("student_id")
		SemesterColumn     = postgres.IntegerColumn("semester")
		CommentaryColumn   = postgres.StringColumn("commentary")
		CommentedAtColumn  = postgres.TimestampzColumn("commented_at")
		allColumns         = postgres.ColumnList{CommentaryIDColumn, StudentIDColumn, SemesterColumn, CommentaryColumn, CommentedAtColumn}
		mutableColumns     = postgres.ColumnList{StudentIDColumn, SemesterColumn, CommentaryColumn, CommentedAtColumn}
	)

	return studentsCommentaryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CommentaryID: CommentaryIDColumn,
		StudentID:    StudentIDColumn,
		Semester:     SemesterColumn,
		Commentary:   CommentaryColumn,
		CommentedAt:  CommentedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
