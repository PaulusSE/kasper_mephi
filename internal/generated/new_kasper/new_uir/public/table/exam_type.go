//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExamType = newExamTypeTable("public", "exam_type", "")

type examTypeTable struct {
	postgres.Table

	//Columns
	TypeID   postgres.ColumnInteger
	ExamName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExamTypeTable struct {
	examTypeTable

	EXCLUDED examTypeTable
}

// AS creates new ExamTypeTable with assigned alias
func (a ExamTypeTable) AS(alias string) *ExamTypeTable {
	return newExamTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExamTypeTable with assigned schema name
func (a ExamTypeTable) FromSchema(schemaName string) *ExamTypeTable {
	return newExamTypeTable(schemaName, a.TableName(), a.Alias())
}

func newExamTypeTable(schemaName, tableName, alias string) *ExamTypeTable {
	return &ExamTypeTable{
		examTypeTable: newExamTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newExamTypeTableImpl("", "excluded", ""),
	}
}

func newExamTypeTableImpl(schemaName, tableName, alias string) examTypeTable {
	var (
		TypeIDColumn   = postgres.IntegerColumn("type_id")
		ExamNameColumn = postgres.StringColumn("exam_name")
		allColumns     = postgres.ColumnList{TypeIDColumn, ExamNameColumn}
		mutableColumns = postgres.ColumnList{ExamNameColumn}
	)

	return examTypeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TypeID:   TypeIDColumn,
		ExamName: ExamNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
