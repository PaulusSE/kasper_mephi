//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthorizationToken = newAuthorizationTokenTable("public", "authorization_token", "")

type authorizationTokenTable struct {
	postgres.Table

	//Columns
	TokenID     postgres.ColumnInteger
	UserID      postgres.ColumnString
	IsActive    postgres.ColumnBool
	TokenNumber postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthorizationTokenTable struct {
	authorizationTokenTable

	EXCLUDED authorizationTokenTable
}

// AS creates new AuthorizationTokenTable with assigned alias
func (a AuthorizationTokenTable) AS(alias string) *AuthorizationTokenTable {
	return newAuthorizationTokenTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorizationTokenTable with assigned schema name
func (a AuthorizationTokenTable) FromSchema(schemaName string) *AuthorizationTokenTable {
	return newAuthorizationTokenTable(schemaName, a.TableName(), a.Alias())
}

func newAuthorizationTokenTable(schemaName, tableName, alias string) *AuthorizationTokenTable {
	return &AuthorizationTokenTable{
		authorizationTokenTable: newAuthorizationTokenTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newAuthorizationTokenTableImpl("", "excluded", ""),
	}
}

func newAuthorizationTokenTableImpl(schemaName, tableName, alias string) authorizationTokenTable {
	var (
		TokenIDColumn     = postgres.IntegerColumn("token_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		IsActiveColumn    = postgres.BoolColumn("is_active")
		TokenNumberColumn = postgres.StringColumn("token_number")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{TokenIDColumn, UserIDColumn, IsActiveColumn, TokenNumberColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, IsActiveColumn, TokenNumberColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return authorizationTokenTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TokenID:     TokenIDColumn,
		UserID:      UserIDColumn,
		IsActive:    IsActiveColumn,
		TokenNumber: TokenNumberColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
