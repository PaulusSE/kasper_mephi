//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Feedback = newFeedbackTable("public", "feedback", "")

type feedbackTable struct {
	postgres.Table

	//Columns
	FeedbackID     postgres.ColumnString
	StudentID      postgres.ColumnString
	DissertationID postgres.ColumnString
	Feedback       postgres.ColumnString
	Semester       postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FeedbackTable struct {
	feedbackTable

	EXCLUDED feedbackTable
}

// AS creates new FeedbackTable with assigned alias
func (a FeedbackTable) AS(alias string) *FeedbackTable {
	return newFeedbackTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FeedbackTable with assigned schema name
func (a FeedbackTable) FromSchema(schemaName string) *FeedbackTable {
	return newFeedbackTable(schemaName, a.TableName(), a.Alias())
}

func newFeedbackTable(schemaName, tableName, alias string) *FeedbackTable {
	return &FeedbackTable{
		feedbackTable: newFeedbackTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newFeedbackTableImpl("", "excluded", ""),
	}
}

func newFeedbackTableImpl(schemaName, tableName, alias string) feedbackTable {
	var (
		FeedbackIDColumn     = postgres.StringColumn("feedback_id")
		StudentIDColumn      = postgres.StringColumn("student_id")
		DissertationIDColumn = postgres.StringColumn("dissertation_id")
		FeedbackColumn       = postgres.StringColumn("feedback")
		SemesterColumn       = postgres.IntegerColumn("semester")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{FeedbackIDColumn, StudentIDColumn, DissertationIDColumn, FeedbackColumn, SemesterColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{StudentIDColumn, DissertationIDColumn, FeedbackColumn, SemesterColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return feedbackTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		FeedbackID:     FeedbackIDColumn,
		StudentID:      StudentIDColumn,
		DissertationID: DissertationIDColumn,
		Feedback:       FeedbackColumn,
		Semester:       SemesterColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
