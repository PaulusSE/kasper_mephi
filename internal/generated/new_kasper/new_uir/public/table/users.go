//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	//Columns
	UserID     postgres.ColumnString
	Email      postgres.ColumnString
	Password   postgres.ColumnString
	KasperID   postgres.ColumnString
	UserType   postgres.ColumnString
	Registered postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		UserIDColumn     = postgres.StringColumn("user_id")
		EmailColumn      = postgres.StringColumn("email")
		PasswordColumn   = postgres.StringColumn("password")
		KasperIDColumn   = postgres.StringColumn("kasper_id")
		UserTypeColumn   = postgres.StringColumn("user_type")
		RegisteredColumn = postgres.BoolColumn("registered")
		allColumns       = postgres.ColumnList{UserIDColumn, EmailColumn, PasswordColumn, KasperIDColumn, UserTypeColumn, RegisteredColumn}
		mutableColumns   = postgres.ColumnList{EmailColumn, PasswordColumn, KasperIDColumn, UserTypeColumn, RegisteredColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		Email:      EmailColumn,
		Password:   PasswordColumn,
		KasperID:   KasperIDColumn,
		UserType:   UserTypeColumn,
		Registered: RegisteredColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
