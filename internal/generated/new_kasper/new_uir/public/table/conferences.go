//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Conferences = newConferencesTable("public", "conferences", "")

type conferencesTable struct {
	postgres.Table

	//Columns
	ConferenceID   postgres.ColumnString
	WorksID        postgres.ColumnString
	Status         postgres.ColumnString
	Index          postgres.ColumnString
	ConferenceName postgres.ColumnString
	ReportName     postgres.ColumnString
	Location       postgres.ColumnString
	ReportedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConferencesTable struct {
	conferencesTable

	EXCLUDED conferencesTable
}

// AS creates new ConferencesTable with assigned alias
func (a ConferencesTable) AS(alias string) *ConferencesTable {
	return newConferencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConferencesTable with assigned schema name
func (a ConferencesTable) FromSchema(schemaName string) *ConferencesTable {
	return newConferencesTable(schemaName, a.TableName(), a.Alias())
}

func newConferencesTable(schemaName, tableName, alias string) *ConferencesTable {
	return &ConferencesTable{
		conferencesTable: newConferencesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newConferencesTableImpl("", "excluded", ""),
	}
}

func newConferencesTableImpl(schemaName, tableName, alias string) conferencesTable {
	var (
		ConferenceIDColumn   = postgres.StringColumn("conference_id")
		WorksIDColumn        = postgres.StringColumn("works_id")
		StatusColumn         = postgres.StringColumn("status")
		IndexColumn          = postgres.StringColumn("index")
		ConferenceNameColumn = postgres.StringColumn("conference_name")
		ReportNameColumn     = postgres.StringColumn("report_name")
		LocationColumn       = postgres.StringColumn("location")
		ReportedAtColumn     = postgres.TimestampzColumn("reported_at")
		allColumns           = postgres.ColumnList{ConferenceIDColumn, WorksIDColumn, StatusColumn, IndexColumn, ConferenceNameColumn, ReportNameColumn, LocationColumn, ReportedAtColumn}
		mutableColumns       = postgres.ColumnList{WorksIDColumn, StatusColumn, IndexColumn, ConferenceNameColumn, ReportNameColumn, LocationColumn, ReportedAtColumn}
	)

	return conferencesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConferenceID:   ConferenceIDColumn,
		WorksID:        WorksIDColumn,
		Status:         StatusColumn,
		Index:          IndexColumn,
		ConferenceName: ConferenceNameColumn,
		ReportName:     ReportNameColumn,
		Location:       LocationColumn,
		ReportedAt:     ReportedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
