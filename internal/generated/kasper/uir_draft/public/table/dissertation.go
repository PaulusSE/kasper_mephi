//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Dissertation = newDissertationTable("public", "dissertation", "")

type dissertationTable struct {
	postgres.Table

	// Columns
	StudentID      postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	DissertationID postgres.ColumnString
	Semester       postgres.ColumnInteger
	Name           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DissertationTable struct {
	dissertationTable

	EXCLUDED dissertationTable
}

// AS creates new DissertationTable with assigned alias
func (a DissertationTable) AS(alias string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DissertationTable with assigned schema name
func (a DissertationTable) FromSchema(schemaName string) *DissertationTable {
	return newDissertationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DissertationTable with assigned table prefix
func (a DissertationTable) WithPrefix(prefix string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DissertationTable with assigned table suffix
func (a DissertationTable) WithSuffix(suffix string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDissertationTable(schemaName, tableName, alias string) *DissertationTable {
	return &DissertationTable{
		dissertationTable: newDissertationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newDissertationTableImpl("", "excluded", ""),
	}
}

func newDissertationTableImpl(schemaName, tableName, alias string) dissertationTable {
	var (
		StudentIDColumn      = postgres.StringColumn("student_id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		DissertationIDColumn = postgres.StringColumn("dissertation_id")
		SemesterColumn       = postgres.IntegerColumn("semester")
		NameColumn           = postgres.StringColumn("name")
		allColumns           = postgres.ColumnList{StudentIDColumn, CreatedAtColumn, UpdatedAtColumn, DissertationIDColumn, SemesterColumn, NameColumn}
		mutableColumns       = postgres.ColumnList{StudentIDColumn, CreatedAtColumn, UpdatedAtColumn, SemesterColumn, NameColumn}
	)

	return dissertationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StudentID:      StudentIDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DissertationID: DissertationIDColumn,
		Semester:       SemesterColumn,
		Name:           NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
