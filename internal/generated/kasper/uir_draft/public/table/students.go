//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Students = newStudentsTable("public", "students", "")

type studentsTable struct {
	postgres.Table

	// Columns
	ClientID           postgres.ColumnString
	StudentID          postgres.ColumnString
	FullName           postgres.ColumnString
	Department         postgres.ColumnString
	EnrollmentOrder    postgres.ColumnString
	TitlePagePath      postgres.ColumnString
	ExplanatoryNoteURL postgres.ColumnString
	Specialization     postgres.ColumnString
	ActualSemester     postgres.ColumnInteger
	SupervisorID       postgres.ColumnString
	StartDate          postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentsTable struct {
	studentsTable

	EXCLUDED studentsTable
}

// AS creates new StudentsTable with assigned alias
func (a StudentsTable) AS(alias string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentsTable with assigned schema name
func (a StudentsTable) FromSchema(schemaName string) *StudentsTable {
	return newStudentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentsTable with assigned table prefix
func (a StudentsTable) WithPrefix(prefix string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentsTable with assigned table suffix
func (a StudentsTable) WithSuffix(suffix string) *StudentsTable {
	return newStudentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentsTable(schemaName, tableName, alias string) *StudentsTable {
	return &StudentsTable{
		studentsTable: newStudentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newStudentsTableImpl("", "excluded", ""),
	}
}

func newStudentsTableImpl(schemaName, tableName, alias string) studentsTable {
	var (
		ClientIDColumn           = postgres.StringColumn("client_id")
		StudentIDColumn          = postgres.StringColumn("student_id")
		FullNameColumn           = postgres.StringColumn("full_name")
		DepartmentColumn         = postgres.StringColumn("department")
		EnrollmentOrderColumn    = postgres.StringColumn("enrollment_order")
		TitlePagePathColumn      = postgres.StringColumn("title_page_path")
		ExplanatoryNoteURLColumn = postgres.StringColumn("explanatory_note_url")
		SpecializationColumn     = postgres.StringColumn("specialization")
		ActualSemesterColumn     = postgres.IntegerColumn("actual_semester")
		SupervisorIDColumn       = postgres.StringColumn("supervisor_id")
		StartDateColumn          = postgres.DateColumn("start_date")
		allColumns               = postgres.ColumnList{ClientIDColumn, StudentIDColumn, FullNameColumn, DepartmentColumn, EnrollmentOrderColumn, TitlePagePathColumn, ExplanatoryNoteURLColumn, SpecializationColumn, ActualSemesterColumn, SupervisorIDColumn, StartDateColumn}
		mutableColumns           = postgres.ColumnList{ClientIDColumn, FullNameColumn, DepartmentColumn, EnrollmentOrderColumn, TitlePagePathColumn, ExplanatoryNoteURLColumn, SpecializationColumn, ActualSemesterColumn, SupervisorIDColumn, StartDateColumn}
	)

	return studentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClientID:           ClientIDColumn,
		StudentID:          StudentIDColumn,
		FullName:           FullNameColumn,
		Department:         DepartmentColumn,
		EnrollmentOrder:    EnrollmentOrderColumn,
		TitlePagePath:      TitlePagePathColumn,
		ExplanatoryNoteURL: ExplanatoryNoteURLColumn,
		Specialization:     SpecializationColumn,
		ActualSemester:     ActualSemesterColumn,
		SupervisorID:       SupervisorIDColumn,
		StartDate:          StartDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
