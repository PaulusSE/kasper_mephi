//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StudentSupervisor = newStudentSupervisorTable("public", "student_supervisor", "")

type studentSupervisorTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	StudentID    postgres.ColumnString
	SupervisorID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentSupervisorTable struct {
	studentSupervisorTable

	EXCLUDED studentSupervisorTable
}

// AS creates new StudentSupervisorTable with assigned alias
func (a StudentSupervisorTable) AS(alias string) *StudentSupervisorTable {
	return newStudentSupervisorTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentSupervisorTable with assigned schema name
func (a StudentSupervisorTable) FromSchema(schemaName string) *StudentSupervisorTable {
	return newStudentSupervisorTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentSupervisorTable with assigned table prefix
func (a StudentSupervisorTable) WithPrefix(prefix string) *StudentSupervisorTable {
	return newStudentSupervisorTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentSupervisorTable with assigned table suffix
func (a StudentSupervisorTable) WithSuffix(suffix string) *StudentSupervisorTable {
	return newStudentSupervisorTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentSupervisorTable(schemaName, tableName, alias string) *StudentSupervisorTable {
	return &StudentSupervisorTable{
		studentSupervisorTable: newStudentSupervisorTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newStudentSupervisorTableImpl("", "excluded", ""),
	}
}

func newStudentSupervisorTableImpl(schemaName, tableName, alias string) studentSupervisorTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		StudentIDColumn    = postgres.StringColumn("student_id")
		SupervisorIDColumn = postgres.StringColumn("supervisor_id")
		allColumns         = postgres.ColumnList{IDColumn, StudentIDColumn, SupervisorIDColumn}
		mutableColumns     = postgres.ColumnList{StudentIDColumn, SupervisorIDColumn}
	)

	return studentSupervisorTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		StudentID:    StudentIDColumn,
		SupervisorID: SupervisorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
