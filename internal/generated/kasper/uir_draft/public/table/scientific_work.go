//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScientificWork = newScientificWorkTable("public", "scientific_work", "")

type scientificWorkTable struct {
	postgres.Table

	// Columns
	WorkID                  postgres.ColumnInteger
	StudentID               postgres.ColumnString
	Semester                postgres.ColumnInteger
	Name                    postgres.ColumnString
	State                   postgres.ColumnString
	Impact                  postgres.ColumnFloat
	OutputData              postgres.ColumnString
	CoAuthors               postgres.ColumnString
	ConferenceParticipation postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScientificWorkTable struct {
	scientificWorkTable

	EXCLUDED scientificWorkTable
}

// AS creates new ScientificWorkTable with assigned alias
func (a ScientificWorkTable) AS(alias string) *ScientificWorkTable {
	return newScientificWorkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScientificWorkTable with assigned schema name
func (a ScientificWorkTable) FromSchema(schemaName string) *ScientificWorkTable {
	return newScientificWorkTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScientificWorkTable with assigned table prefix
func (a ScientificWorkTable) WithPrefix(prefix string) *ScientificWorkTable {
	return newScientificWorkTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScientificWorkTable with assigned table suffix
func (a ScientificWorkTable) WithSuffix(suffix string) *ScientificWorkTable {
	return newScientificWorkTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScientificWorkTable(schemaName, tableName, alias string) *ScientificWorkTable {
	return &ScientificWorkTable{
		scientificWorkTable: newScientificWorkTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newScientificWorkTableImpl("", "excluded", ""),
	}
}

func newScientificWorkTableImpl(schemaName, tableName, alias string) scientificWorkTable {
	var (
		WorkIDColumn                  = postgres.IntegerColumn("work_id")
		StudentIDColumn               = postgres.StringColumn("student_id")
		SemesterColumn                = postgres.IntegerColumn("semester")
		NameColumn                    = postgres.StringColumn("name")
		StateColumn                   = postgres.StringColumn("state")
		ImpactColumn                  = postgres.FloatColumn("impact")
		OutputDataColumn              = postgres.StringColumn("output_data")
		CoAuthorsColumn               = postgres.StringColumn("co_authors")
		ConferenceParticipationColumn = postgres.StringColumn("conference_participation")
		allColumns                    = postgres.ColumnList{WorkIDColumn, StudentIDColumn, SemesterColumn, NameColumn, StateColumn, ImpactColumn, OutputDataColumn, CoAuthorsColumn, ConferenceParticipationColumn}
		mutableColumns                = postgres.ColumnList{StudentIDColumn, SemesterColumn, NameColumn, StateColumn, ImpactColumn, OutputDataColumn, CoAuthorsColumn, ConferenceParticipationColumn}
	)

	return scientificWorkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkID:                  WorkIDColumn,
		StudentID:               StudentIDColumn,
		Semester:                SemesterColumn,
		Name:                    NameColumn,
		State:                   StateColumn,
		Impact:                  ImpactColumn,
		OutputData:              OutputDataColumn,
		CoAuthors:               CoAuthorsColumn,
		ConferenceParticipation: ConferenceParticipationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
