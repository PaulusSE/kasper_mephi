//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StudentExam = newStudentExamTable("public", "student_exam", "")

type studentExamTable struct {
	postgres.Table

	// Columns
	Mark      postgres.ColumnInteger
	Date      postgres.ColumnDate
	ExamID    postgres.ColumnInteger
	StudentID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentExamTable struct {
	studentExamTable

	EXCLUDED studentExamTable
}

// AS creates new StudentExamTable with assigned alias
func (a StudentExamTable) AS(alias string) *StudentExamTable {
	return newStudentExamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentExamTable with assigned schema name
func (a StudentExamTable) FromSchema(schemaName string) *StudentExamTable {
	return newStudentExamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentExamTable with assigned table prefix
func (a StudentExamTable) WithPrefix(prefix string) *StudentExamTable {
	return newStudentExamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentExamTable with assigned table suffix
func (a StudentExamTable) WithSuffix(suffix string) *StudentExamTable {
	return newStudentExamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentExamTable(schemaName, tableName, alias string) *StudentExamTable {
	return &StudentExamTable{
		studentExamTable: newStudentExamTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newStudentExamTableImpl("", "excluded", ""),
	}
}

func newStudentExamTableImpl(schemaName, tableName, alias string) studentExamTable {
	var (
		MarkColumn      = postgres.IntegerColumn("mark")
		DateColumn      = postgres.DateColumn("date")
		ExamIDColumn    = postgres.IntegerColumn("exam_id")
		StudentIDColumn = postgres.StringColumn("student_id")
		allColumns      = postgres.ColumnList{MarkColumn, DateColumn, ExamIDColumn, StudentIDColumn}
		mutableColumns  = postgres.ColumnList{MarkColumn, DateColumn, ExamIDColumn, StudentIDColumn}
	)

	return studentExamTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Mark:      MarkColumn,
		Date:      DateColumn,
		ExamID:    ExamIDColumn,
		StudentID: StudentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
