//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserClass = newUserClassTable("public", "user_class", "")

type userClassTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserClassTable struct {
	userClassTable

	EXCLUDED userClassTable
}

// AS creates new UserClassTable with assigned alias
func (a UserClassTable) AS(alias string) *UserClassTable {
	return newUserClassTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserClassTable with assigned schema name
func (a UserClassTable) FromSchema(schemaName string) *UserClassTable {
	return newUserClassTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserClassTable with assigned table prefix
func (a UserClassTable) WithPrefix(prefix string) *UserClassTable {
	return newUserClassTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserClassTable with assigned table suffix
func (a UserClassTable) WithSuffix(suffix string) *UserClassTable {
	return newUserClassTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserClassTable(schemaName, tableName, alias string) *UserClassTable {
	return &UserClassTable{
		userClassTable: newUserClassTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newUserClassTableImpl("", "excluded", ""),
	}
}

func newUserClassTableImpl(schemaName, tableName, alias string) userClassTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return userClassTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
