//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Student = newStudentTable("public", "student", "")

type studentTable struct {
	postgres.Table

	// Columns
	UserID           postgres.ColumnString
	StudentID        postgres.ColumnString
	StartDate        postgres.ColumnDate
	Department       postgres.ColumnString
	EnrollmentOrder  postgres.ColumnString
	AcademicLeave    postgres.ColumnBool
	PlanPath         postgres.ColumnString
	StudyingDuration postgres.ColumnInteger
	FullName         postgres.ColumnString
	SpecializationID postgres.ColumnInteger
	PublicationID    postgres.ColumnString
	SupervisorID     postgres.ColumnString
	Faculty          postgres.ColumnString
	GroupName        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StudentTable struct {
	studentTable

	EXCLUDED studentTable
}

// AS creates new StudentTable with assigned alias
func (a StudentTable) AS(alias string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudentTable with assigned schema name
func (a StudentTable) FromSchema(schemaName string) *StudentTable {
	return newStudentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudentTable with assigned table prefix
func (a StudentTable) WithPrefix(prefix string) *StudentTable {
	return newStudentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudentTable with assigned table suffix
func (a StudentTable) WithSuffix(suffix string) *StudentTable {
	return newStudentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudentTable(schemaName, tableName, alias string) *StudentTable {
	return &StudentTable{
		studentTable: newStudentTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newStudentTableImpl("", "excluded", ""),
	}
}

func newStudentTableImpl(schemaName, tableName, alias string) studentTable {
	var (
		UserIDColumn           = postgres.StringColumn("user_id")
		StudentIDColumn        = postgres.StringColumn("student_id")
		StartDateColumn        = postgres.DateColumn("start_date")
		DepartmentColumn       = postgres.StringColumn("department")
		EnrollmentOrderColumn  = postgres.StringColumn("enrollment_order")
		AcademicLeaveColumn    = postgres.BoolColumn("academic_leave")
		PlanPathColumn         = postgres.StringColumn("plan_path")
		StudyingDurationColumn = postgres.IntegerColumn("studying_duration")
		FullNameColumn         = postgres.StringColumn("full_name")
		SpecializationIDColumn = postgres.IntegerColumn("specialization_id")
		PublicationIDColumn    = postgres.StringColumn("publication_id")
		SupervisorIDColumn     = postgres.StringColumn("supervisor_id")
		FacultyColumn          = postgres.StringColumn("faculty")
		GroupNameColumn        = postgres.StringColumn("group_name")
		allColumns             = postgres.ColumnList{UserIDColumn, StudentIDColumn, StartDateColumn, DepartmentColumn, EnrollmentOrderColumn, AcademicLeaveColumn, PlanPathColumn, StudyingDurationColumn, FullNameColumn, SpecializationIDColumn, PublicationIDColumn, SupervisorIDColumn, FacultyColumn, GroupNameColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, StartDateColumn, DepartmentColumn, EnrollmentOrderColumn, AcademicLeaveColumn, PlanPathColumn, StudyingDurationColumn, FullNameColumn, SpecializationIDColumn, PublicationIDColumn, SupervisorIDColumn, FacultyColumn, GroupNameColumn}
	)

	return studentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:           UserIDColumn,
		StudentID:        StudentIDColumn,
		StartDate:        StartDateColumn,
		Department:       DepartmentColumn,
		EnrollmentOrder:  EnrollmentOrderColumn,
		AcademicLeave:    AcademicLeaveColumn,
		PlanPath:         PlanPathColumn,
		StudyingDuration: StudyingDurationColumn,
		FullName:         FullNameColumn,
		SpecializationID: SpecializationIDColumn,
		PublicationID:    PublicationIDColumn,
		SupervisorID:     SupervisorIDColumn,
		Faculty:          FacultyColumn,
		GroupName:        GroupNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
