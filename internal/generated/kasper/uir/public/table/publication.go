//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Publication = newPublicationTable("public", "publication", "")

type publicationTable struct {
	postgres.Table

	// Columns
	PublicationID postgres.ColumnString
	Name          postgres.ColumnString
	OutputData    postgres.ColumnString
	NumOfPages    postgres.ColumnInteger
	CoAuthors     postgres.ColumnString
	TypeID        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PublicationTable struct {
	publicationTable

	EXCLUDED publicationTable
}

// AS creates new PublicationTable with assigned alias
func (a PublicationTable) AS(alias string) *PublicationTable {
	return newPublicationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublicationTable with assigned schema name
func (a PublicationTable) FromSchema(schemaName string) *PublicationTable {
	return newPublicationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PublicationTable with assigned table prefix
func (a PublicationTable) WithPrefix(prefix string) *PublicationTable {
	return newPublicationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PublicationTable with assigned table suffix
func (a PublicationTable) WithSuffix(suffix string) *PublicationTable {
	return newPublicationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPublicationTable(schemaName, tableName, alias string) *PublicationTable {
	return &PublicationTable{
		publicationTable: newPublicationTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newPublicationTableImpl("", "excluded", ""),
	}
}

func newPublicationTableImpl(schemaName, tableName, alias string) publicationTable {
	var (
		PublicationIDColumn = postgres.StringColumn("publication_id")
		NameColumn          = postgres.StringColumn("name")
		OutputDataColumn    = postgres.StringColumn("output_data")
		NumOfPagesColumn    = postgres.IntegerColumn("num_of_pages")
		CoAuthorsColumn     = postgres.StringColumn("co_authors")
		TypeIDColumn        = postgres.IntegerColumn("type_id")
		allColumns          = postgres.ColumnList{PublicationIDColumn, NameColumn, OutputDataColumn, NumOfPagesColumn, CoAuthorsColumn, TypeIDColumn}
		mutableColumns      = postgres.ColumnList{NameColumn, OutputDataColumn, NumOfPagesColumn, CoAuthorsColumn, TypeIDColumn}
	)

	return publicationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PublicationID: PublicationIDColumn,
		Name:          NameColumn,
		OutputData:    OutputDataColumn,
		NumOfPages:    NumOfPagesColumn,
		CoAuthors:     CoAuthorsColumn,
		TypeID:        TypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
