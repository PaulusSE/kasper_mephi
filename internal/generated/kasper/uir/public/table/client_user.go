//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClientUser = newClientUserTable("public", "client_user", "")

type clientUserTable struct {
	postgres.Table

	// Columns
	UserID   postgres.ColumnString
	Email    postgres.ColumnString
	Password postgres.ColumnString
	ID       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClientUserTable struct {
	clientUserTable

	EXCLUDED clientUserTable
}

// AS creates new ClientUserTable with assigned alias
func (a ClientUserTable) AS(alias string) *ClientUserTable {
	return newClientUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClientUserTable with assigned schema name
func (a ClientUserTable) FromSchema(schemaName string) *ClientUserTable {
	return newClientUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClientUserTable with assigned table prefix
func (a ClientUserTable) WithPrefix(prefix string) *ClientUserTable {
	return newClientUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClientUserTable with assigned table suffix
func (a ClientUserTable) WithSuffix(suffix string) *ClientUserTable {
	return newClientUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClientUserTable(schemaName, tableName, alias string) *ClientUserTable {
	return &ClientUserTable{
		clientUserTable: newClientUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newClientUserTableImpl("", "excluded", ""),
	}
}

func newClientUserTableImpl(schemaName, tableName, alias string) clientUserTable {
	var (
		UserIDColumn   = postgres.StringColumn("user_id")
		EmailColumn    = postgres.StringColumn("email")
		PasswordColumn = postgres.StringColumn("password")
		IDColumn       = postgres.IntegerColumn("id")
		allColumns     = postgres.ColumnList{UserIDColumn, EmailColumn, PasswordColumn, IDColumn}
		mutableColumns = postgres.ColumnList{EmailColumn, PasswordColumn, IDColumn}
	)

	return clientUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:   UserIDColumn,
		Email:    EmailColumn,
		Password: PasswordColumn,
		ID:       IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
