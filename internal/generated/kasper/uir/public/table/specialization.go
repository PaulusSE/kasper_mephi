//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Specialization = newSpecializationTable("public", "specialization", "")

type specializationTable struct {
	postgres.Table

	// Columns
	Name             postgres.ColumnString
	SpecializationID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SpecializationTable struct {
	specializationTable

	EXCLUDED specializationTable
}

// AS creates new SpecializationTable with assigned alias
func (a SpecializationTable) AS(alias string) *SpecializationTable {
	return newSpecializationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpecializationTable with assigned schema name
func (a SpecializationTable) FromSchema(schemaName string) *SpecializationTable {
	return newSpecializationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpecializationTable with assigned table prefix
func (a SpecializationTable) WithPrefix(prefix string) *SpecializationTable {
	return newSpecializationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpecializationTable with assigned table suffix
func (a SpecializationTable) WithSuffix(suffix string) *SpecializationTable {
	return newSpecializationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpecializationTable(schemaName, tableName, alias string) *SpecializationTable {
	return &SpecializationTable{
		specializationTable: newSpecializationTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSpecializationTableImpl("", "excluded", ""),
	}
}

func newSpecializationTableImpl(schemaName, tableName, alias string) specializationTable {
	var (
		NameColumn             = postgres.StringColumn("name")
		SpecializationIDColumn = postgres.IntegerColumn("specialization_id")
		allColumns             = postgres.ColumnList{NameColumn, SpecializationIDColumn}
		mutableColumns         = postgres.ColumnList{NameColumn}
	)

	return specializationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Name:             NameColumn,
		SpecializationID: SpecializationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
