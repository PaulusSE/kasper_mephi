//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Type = newTypeTable("public", "type", "")

type typeTable struct {
	postgres.Table

	// Columns
	TypeID   postgres.ColumnInteger
	TypeName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TypeTable struct {
	typeTable

	EXCLUDED typeTable
}

// AS creates new TypeTable with assigned alias
func (a TypeTable) AS(alias string) *TypeTable {
	return newTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TypeTable with assigned schema name
func (a TypeTable) FromSchema(schemaName string) *TypeTable {
	return newTypeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TypeTable with assigned table prefix
func (a TypeTable) WithPrefix(prefix string) *TypeTable {
	return newTypeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TypeTable with assigned table suffix
func (a TypeTable) WithSuffix(suffix string) *TypeTable {
	return newTypeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTypeTable(schemaName, tableName, alias string) *TypeTable {
	return &TypeTable{
		typeTable: newTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newTypeTableImpl("", "excluded", ""),
	}
}

func newTypeTableImpl(schemaName, tableName, alias string) typeTable {
	var (
		TypeIDColumn   = postgres.IntegerColumn("type_id")
		TypeNameColumn = postgres.StringColumn("type_name")
		allColumns     = postgres.ColumnList{TypeIDColumn, TypeNameColumn}
		mutableColumns = postgres.ColumnList{TypeNameColumn}
	)

	return typeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TypeID:   TypeIDColumn,
		TypeName: TypeNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
