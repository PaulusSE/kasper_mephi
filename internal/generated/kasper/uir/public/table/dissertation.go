//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Dissertation = newDissertationTable("public", "dissertation", "")

type dissertationTable struct {
	postgres.Table

	// Columns
	TitlePath         postgres.ColumnString
	PzPath            postgres.ColumnString
	DissertationID    postgres.ColumnString
	StatusID          postgres.ColumnInteger
	StudentID         postgres.ColumnString
	PublishDate       postgres.ColumnDate
	DissertationTitle postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DissertationTable struct {
	dissertationTable

	EXCLUDED dissertationTable
}

// AS creates new DissertationTable with assigned alias
func (a DissertationTable) AS(alias string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DissertationTable with assigned schema name
func (a DissertationTable) FromSchema(schemaName string) *DissertationTable {
	return newDissertationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DissertationTable with assigned table prefix
func (a DissertationTable) WithPrefix(prefix string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DissertationTable with assigned table suffix
func (a DissertationTable) WithSuffix(suffix string) *DissertationTable {
	return newDissertationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDissertationTable(schemaName, tableName, alias string) *DissertationTable {
	return &DissertationTable{
		dissertationTable: newDissertationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newDissertationTableImpl("", "excluded", ""),
	}
}

func newDissertationTableImpl(schemaName, tableName, alias string) dissertationTable {
	var (
		TitlePathColumn         = postgres.StringColumn("title_path")
		PzPathColumn            = postgres.StringColumn("pz_path")
		DissertationIDColumn    = postgres.StringColumn("dissertation_id")
		StatusIDColumn          = postgres.IntegerColumn("status_id")
		StudentIDColumn         = postgres.StringColumn("student_id")
		PublishDateColumn       = postgres.DateColumn("publish_date")
		DissertationTitleColumn = postgres.StringColumn("dissertation_title")
		allColumns              = postgres.ColumnList{TitlePathColumn, PzPathColumn, DissertationIDColumn, StatusIDColumn, StudentIDColumn, PublishDateColumn, DissertationTitleColumn}
		mutableColumns          = postgres.ColumnList{TitlePathColumn, PzPathColumn, StatusIDColumn, StudentIDColumn, PublishDateColumn, DissertationTitleColumn}
	)

	return dissertationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TitlePath:         TitlePathColumn,
		PzPath:            PzPathColumn,
		DissertationID:    DissertationIDColumn,
		StatusID:          StatusIDColumn,
		StudentID:         StudentIDColumn,
		PublishDate:       PublishDateColumn,
		DissertationTitle: DissertationTitleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
