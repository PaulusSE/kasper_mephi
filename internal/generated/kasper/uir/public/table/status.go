//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Status = newStatusTable("public", "status", "")

type statusTable struct {
	postgres.Table

	// Columns
	StatusName postgres.ColumnString
	StatusID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StatusTable struct {
	statusTable

	EXCLUDED statusTable
}

// AS creates new StatusTable with assigned alias
func (a StatusTable) AS(alias string) *StatusTable {
	return newStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StatusTable with assigned schema name
func (a StatusTable) FromSchema(schemaName string) *StatusTable {
	return newStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StatusTable with assigned table prefix
func (a StatusTable) WithPrefix(prefix string) *StatusTable {
	return newStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StatusTable with assigned table suffix
func (a StatusTable) WithSuffix(suffix string) *StatusTable {
	return newStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStatusTable(schemaName, tableName, alias string) *StatusTable {
	return &StatusTable{
		statusTable: newStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newStatusTableImpl("", "excluded", ""),
	}
}

func newStatusTableImpl(schemaName, tableName, alias string) statusTable {
	var (
		StatusNameColumn = postgres.StringColumn("status_name")
		StatusIDColumn   = postgres.IntegerColumn("status_id")
		allColumns       = postgres.ColumnList{StatusNameColumn, StatusIDColumn}
		mutableColumns   = postgres.ColumnList{StatusNameColumn}
	)

	return statusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		StatusName: StatusNameColumn,
		StatusID:   StatusIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
