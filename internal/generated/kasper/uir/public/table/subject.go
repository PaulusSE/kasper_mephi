//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subject = newSubjectTable("public", "subject", "")

type subjectTable struct {
	postgres.Table

	// Columns
	SubjectID   postgres.ColumnString
	Name        postgres.ColumnString
	MainTeacher postgres.ColumnString
	Hours       postgres.ColumnInteger
	StudentID   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubjectTable struct {
	subjectTable

	EXCLUDED subjectTable
}

// AS creates new SubjectTable with assigned alias
func (a SubjectTable) AS(alias string) *SubjectTable {
	return newSubjectTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubjectTable with assigned schema name
func (a SubjectTable) FromSchema(schemaName string) *SubjectTable {
	return newSubjectTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubjectTable with assigned table prefix
func (a SubjectTable) WithPrefix(prefix string) *SubjectTable {
	return newSubjectTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubjectTable with assigned table suffix
func (a SubjectTable) WithSuffix(suffix string) *SubjectTable {
	return newSubjectTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubjectTable(schemaName, tableName, alias string) *SubjectTable {
	return &SubjectTable{
		subjectTable: newSubjectTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newSubjectTableImpl("", "excluded", ""),
	}
}

func newSubjectTableImpl(schemaName, tableName, alias string) subjectTable {
	var (
		SubjectIDColumn   = postgres.StringColumn("subject_id")
		NameColumn        = postgres.StringColumn("name")
		MainTeacherColumn = postgres.StringColumn("main_teacher")
		HoursColumn       = postgres.IntegerColumn("hours")
		StudentIDColumn   = postgres.StringColumn("student_id")
		allColumns        = postgres.ColumnList{SubjectIDColumn, NameColumn, MainTeacherColumn, HoursColumn, StudentIDColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, MainTeacherColumn, HoursColumn, StudentIDColumn}
	)

	return subjectTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SubjectID:   SubjectIDColumn,
		Name:        NameColumn,
		MainTeacher: MainTeacherColumn,
		Hours:       HoursColumn,
		StudentID:   StudentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
