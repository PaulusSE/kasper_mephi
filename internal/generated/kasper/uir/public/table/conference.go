//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Conference = newConferenceTable("public", "conference", "")

type conferenceTable struct {
	postgres.Table

	// Columns
	Name         postgres.ColumnString
	ConferenceID postgres.ColumnString
	ArticleName  postgres.ColumnString
	CoAuthors    postgres.ColumnString
	Language     postgres.ColumnString
	TypeID       postgres.ColumnInteger
	StudentID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConferenceTable struct {
	conferenceTable

	EXCLUDED conferenceTable
}

// AS creates new ConferenceTable with assigned alias
func (a ConferenceTable) AS(alias string) *ConferenceTable {
	return newConferenceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConferenceTable with assigned schema name
func (a ConferenceTable) FromSchema(schemaName string) *ConferenceTable {
	return newConferenceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConferenceTable with assigned table prefix
func (a ConferenceTable) WithPrefix(prefix string) *ConferenceTable {
	return newConferenceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConferenceTable with assigned table suffix
func (a ConferenceTable) WithSuffix(suffix string) *ConferenceTable {
	return newConferenceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConferenceTable(schemaName, tableName, alias string) *ConferenceTable {
	return &ConferenceTable{
		conferenceTable: newConferenceTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newConferenceTableImpl("", "excluded", ""),
	}
}

func newConferenceTableImpl(schemaName, tableName, alias string) conferenceTable {
	var (
		NameColumn         = postgres.StringColumn("name")
		ConferenceIDColumn = postgres.StringColumn("conference_id")
		ArticleNameColumn  = postgres.StringColumn("article_name")
		CoAuthorsColumn    = postgres.StringColumn("co_authors")
		LanguageColumn     = postgres.StringColumn("language")
		TypeIDColumn       = postgres.IntegerColumn("type_id")
		StudentIDColumn    = postgres.StringColumn("student_id")
		allColumns         = postgres.ColumnList{NameColumn, ConferenceIDColumn, ArticleNameColumn, CoAuthorsColumn, LanguageColumn, TypeIDColumn, StudentIDColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, ArticleNameColumn, CoAuthorsColumn, LanguageColumn, TypeIDColumn, StudentIDColumn}
	)

	return conferenceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Name:         NameColumn,
		ConferenceID: ConferenceIDColumn,
		ArticleName:  ArticleNameColumn,
		CoAuthors:    CoAuthorsColumn,
		Language:     LanguageColumn,
		TypeID:       TypeIDColumn,
		StudentID:    StudentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
